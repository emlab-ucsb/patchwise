% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/convert_solution.R
\name{convert_solution}
\alias{convert_solution}
\title{Converts prioritization solution into a more digestible output}
\usage{
convert_solution(solution, patches_df, planning_grid)
}
\arguments{
\item{solution}{the solution that results from using \code{prioritizr::solve()} on \code{prioritizr::problem()}}

\item{planning_grid}{a raster or sf template with the desired resolution and coordinate reference system generated by \code{offshoredatr::get_planning_grid()}; values in areas of interest are 1, while all other values are NA (only required if feature is a sf object)}

\item{patch_df}{a dataframe generated by \code{create_patch_df()} that includes constraints for each patch and grid cell combination}
}
\value{
A raster or sf object that denotes areas suggested for protection (value = 1)
}
\description{
This function converts the prioritization solution that uses patches to a raster or sf object (depending on the format of your planning_grid) that clearly marks areas suggested for protection (1) and areas not suggested for protection (0)
}
\examples{
## To be updated later
# Create patches from seamount raster data
seamount_patches <- create_patches(seamount_raster)
# Create dataframe from patches
patches_raster_df <- create_patch_df(planning_grid = planning_raster, features = features_raster, patches = seamount_patches)
# Run boundary matrix
boundary_matrix <- create_boundary_matrix(planning_grid = planning_raster, patches = seamount_patches, patch_df = patches_raster_df)
# Create features targets
feature_targets <- features_targets(targets = rep(0.2, (terra::nlyr(features_raster)) + 1), features = features_raster, pre_patches = seamounts_raster)
# Create manual targets with constraints
constraint_targets <- constraints_targets(feature_targets = features_targets, patch_df = patches_raster_df)
# Create prioritization problem
problem_raster <- problem(x = patches_raster_df, features = constraint_targets$feature, cost_column = "cost") \%>\% add_min_set_objective() \%>\% add_manual_targets(constraint_targets) \%>\% add_binary_decisions() \%>\% add_boundary_penalties(penalty = 0.000002, data = boundary_matrix) \%>\% add_gurobi_solver(gap = 0.1, threads = parallel::detectCores()-1)
# Solve problem
solution <- solve(problem_raster)
# Convert to a more digestible format
suggested_protection <- convert_solution(solution = solution, patches_df = patches_raster_df, planning_grid = planning_raster)
}
